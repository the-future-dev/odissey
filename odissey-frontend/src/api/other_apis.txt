
// export const loginGuest = async (): Promise<{ sessionToken: string; routeToDemo: boolean }> => {
//   const res = await fetch(`${API_URL}/auth/guest`, {
//     method: 'POST',
//     headers: { 'Content-Type': 'application/json' },
//   });
//   return handleResponse(res);
// };

// export const loginGoogle = async (googleToken: string): Promise<{ sessionToken: string; routeToDemo: boolean }> => {
//   const res = await fetch(`${API_URL}/auth/google`, {
//     method: 'POST',
//     headers: { 'Content-Type': 'application/json' },
//     body: JSON.stringify({ token: googleToken })
//   });
//   return handleResponse(res);
// };


export const fetchDemoWorlds = async (token: string): Promise<DemoWorld[]> => {
  const res = await fetch(`${API_URL}/demo/worlds`, {
    headers: { Authorization: `Bearer ${token}` },
  });
  return handleResponse(res);
};

export const completePreferenceDiscovery = async (token: string, responses: PreferenceResponses): Promise<PersonalityProfile> => {
  const response = await fetch(`${API_URL}/onboarding/preference-discovery`, {
    method: 'POST',
    headers: { 
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    },
    body: JSON.stringify(responses)
  });
  return handleResponse(response);
};

export const fetchWorldGallery = async (token: string, page = 1, personality?: PersonalityProfile): Promise<WorldSummary[]> => {
  const params = new URLSearchParams({ 
    public: 'true', 
    page: page.toString(),
    ...(personality && { personality: JSON.stringify(personality) })
  });
  
  const response = await fetch(`${API_URL}/worlds?${params}`, {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  return handleResponse(response);
};

export const startGenAICoCreation = async (token: string, initialConcept: string): Promise<string> => {
  const response = await fetch(`${API_URL}/worlds/co-create`, {
    method: 'POST',
    headers: { 
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    },
    body: JSON.stringify({ concept: initialConcept })
  });
  return handleResponse(response);
};